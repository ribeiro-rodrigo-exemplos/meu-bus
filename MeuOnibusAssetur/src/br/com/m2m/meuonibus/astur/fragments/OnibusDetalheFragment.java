package br.com.m2m.meuonibus.astur.fragments;import java.util.ArrayList;import java.util.List;import android.annotation.SuppressLint;import android.app.Activity;import android.graphics.Color;import android.location.Location;import android.os.Build;import android.os.Bundle;import android.support.v4.app.Fragment;import android.view.LayoutInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.view.animation.AlphaAnimation;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import br.com.hhw.startapp.helpers.ServiceRestClientHelper;import br.com.m2m.meuonibus.astur.R;import br.com.m2m.meuonibus.astur.models.ws.MeuOnibusWS;import br.com.m2m.meuonibuscommons.handlers.TrajetoHandler;import br.com.m2m.meuonibuscommons.models.Coordenada;import br.com.m2m.meuonibuscommons.models.LinhaOnibus;import br.com.m2m.meuonibuscommons.models.Trajeto;import br.com.m2m.meuonibuscommons.models.db.LocalizacaoDAO;import com.google.android.gms.common.ConnectionResult;import com.google.android.gms.common.GooglePlayServicesUtil;import com.google.android.gms.maps.CameraUpdateFactory;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.MapView;import com.google.android.gms.maps.MapsInitializer;import com.google.android.gms.maps.model.BitmapDescriptorFactory;import com.google.android.gms.maps.model.CameraPosition;import com.google.android.gms.maps.model.LatLng;import com.google.android.gms.maps.model.Marker;import com.google.android.gms.maps.model.MarkerOptions;import com.google.android.gms.maps.model.PolylineOptions;public class OnibusDetalheFragment extends Fragment {	LinhaOnibus linha;	private Activity ownerActivity;	private TextView nomeLinha;	private RelativeLayout caixaNomeLinha;	MapView mMapView;	private GoogleMap googleMap;	int statusGooglePlayServices;	public static final String BUNDLE_ONIBUS_DETALHE_LINHA = OnibusDetalheFragment.class			.getName() + "#bundle_LINHA";	private List<Trajeto> trajetos = new ArrayList<Trajeto>();	private List<Coordenada> coordenadas = new ArrayList<Coordenada>();	private Marker busMarker;	Marker markerMe;		Location userLocation;	public static OnibusDetalheFragment newInstance(LinhaOnibus linha) {		OnibusDetalheFragment fragment = new OnibusDetalheFragment();		Bundle bundle = new Bundle();		bundle.putSerializable(BUNDLE_ONIBUS_DETALHE_LINHA, linha);		fragment.setArguments(bundle);		return fragment;	}	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container,			Bundle savedInstanceState) {		setHasOptionsMenu(true);		statusGooglePlayServices = GooglePlayServicesUtil				.isGooglePlayServicesAvailable(getActivity());		View contentView = inflater.inflate(R.layout.fragment_onibus_detalhe,				container, false);		mMapView = (MapView) contentView				.findViewById(R.id.mapView_onibus_detalhe);		mMapView.onCreate(savedInstanceState);		setLayout(contentView);		try {			linha = (LinhaOnibus) getArguments().getSerializable(					BUNDLE_ONIBUS_DETALHE_LINHA);			nomeLinha.setText(linha.name);		} catch (Exception e) {			// TODO: handle exception		}		if (statusGooglePlayServices == ConnectionResult.SUCCESS) {			initMap();			loadTrajeto();						googleMap	          .setOnMyLocationChangeListener(new GoogleMap.OnMyLocationChangeListener() {	            @Override	            public void onMyLocationChange(Location location) {	            	userLocation = location;	            	setMarkerMe();	            }	          });			googleMap.setMyLocationEnabled(true);		} else {		}		return contentView;	}	@SuppressLint("NewApi")	private void setLayout(View contentView) {		nomeLinha = (TextView) contentView				.findViewById(R.id.nome_linha_onibus_detalhe_fragment);		caixaNomeLinha = (RelativeLayout) contentView				.findViewById(R.id.container_nome_linha_onibus_detalhe_fragment);		float alpha = 0.85f;		if (Build.VERSION.SDK_INT < 11) {			final AlphaAnimation animation = new AlphaAnimation(alpha, alpha);			animation.setDuration(0);			animation.setFillAfter(true);			caixaNomeLinha.startAnimation(animation);		} else {			caixaNomeLinha.setAlpha(alpha);		}	}	@Override	public boolean onOptionsItemSelected(MenuItem item) {		ownerActivity.onBackPressed();		return super.onOptionsItemSelected(item);	}	private void initMap() {		try {			MapsInitializer.initialize(getActivity().getApplicationContext());			showBrasil();		} catch (Exception e) {			e.printStackTrace();		}	}	private void showBrasil() {		LocalizacaoDAO localDao = new LocalizacaoDAO(ownerActivity);		localDao.open();		Coordenada localDB = localDao.selectUltimoPonto();		if (mMapView != null) {			googleMap = mMapView.getMap();			if (localDB == null) {				Coordenada local = new Coordenada();				local.latitude = -14.2392976;				local.longitude = -53.1805017;				localDB = local;			}			CameraPosition cameraPosition = new CameraPosition.Builder()					.target(new LatLng(localDB.latitude, localDB.longitude))					.zoom(4).build();			googleMap.moveCamera(CameraUpdateFactory					.newCameraPosition(cameraPosition));			googleMap.setIndoorEnabled(true);		}	}	@Override	public void onAttach(Activity activity) {		super.onAttach(activity);		ownerActivity = activity;	}	private void loadTrajeto() {		if (linha == null)			return;		MeuOnibusWS.getTrajetos(linha.idLinha, new TrajetoHandler() {			@Override			public void setTrajetos(ArrayList<Trajeto> trajetosHandler) {				trajetos = trajetosHandler;				try {					if (trajetos.size() > 0) {						for (Trajeto trajeto: trajetos) {							coordenadas = trajeto.coordenadas;							showTrajeto();							}					}				} catch (Exception e) {					// TODO: handle exception				}						}			@Override			public void setErro(Throwable e) {				try {					Toast.makeText(ownerActivity.getApplicationContext(),							getString(R.string.nao_foi_possivel_obter_trajeto),							Toast.LENGTH_SHORT).show();				} catch (Exception e2) {					// TODO: handle exception				}			}		});	}	private void showTrajeto() {		zoomInPolyline();		setPolyline();		setBusLocalization();	}		private void setBusLocalization() {		if (busMarker != null) {			busMarker.remove();		}		MarkerOptions bus = new MarkerOptions().position(new LatLng(				linha.latLong.latitude, linha.latLong.longitude));		bus.icon(BitmapDescriptorFactory.fromResource(R.drawable.map_onibus));		bus.title(linha.name);		bus.snippet(linha.name);		busMarker = googleMap.addMarker(bus);	}	private void setPolyline() {		PolylineOptions options = new PolylineOptions();		options.width(5);		options.color(Color.rgb(255, 165, 0));		options.geodesic(true);		for (int i = 0; i < coordenadas.size(); i++) {			Coordenada point = coordenadas.get(i);			options.add(new LatLng(point.latitude, point.longitude));			googleMap.addPolyline(options);						if(i == 0) showLineStart(point);			if(i == coordenadas.size() - 1) showLineEnd(point);		}	}		private void showLineStart(Coordenada point) {		MarkerOptions start = new MarkerOptions().position(new LatLng(				point.latitude, point.longitude));		start.anchor(0.5f, 0.5f);		start.icon(BitmapDescriptorFactory.fromResource(R.drawable.map_bolinha));		googleMap.addMarker(start);	}		private void showLineEnd(Coordenada point) {		MarkerOptions end = new MarkerOptions().position(new LatLng(				point.latitude, point.longitude));		end.anchor(0.5f, 0.5f);		end.icon(BitmapDescriptorFactory.fromResource(R.drawable.map_bolinha));		googleMap.addMarker(end);	}	private void zoomInPolyline() {		int resultado = (int) Math.ceil(coordenadas.size() / 2);		Coordenada coordenada = coordenadas.get(resultado);		googleMap = mMapView.getMap();		CameraPosition cameraPosition = new CameraPosition.Builder()				.target(new LatLng(coordenada.latitude, coordenada.longitude))				.zoom(11.2f).build();		googleMap.moveCamera(CameraUpdateFactory				.newCameraPosition(cameraPosition));	}		private void setMarkerMe() {		if (markerMe != null) {			markerMe.remove();		}				MarkerOptions me = new MarkerOptions().position(				new LatLng(userLocation.getLatitude(), userLocation.getLongitude()))				.icon(BitmapDescriptorFactory					.fromResource(R.drawable.map_pessoa));		markerMe = googleMap.addMarker(me);	}	@Override	public void onResume() {		super.onResume();		mMapView.onResume();		if (googleMap != null)		    googleMap.setMyLocationEnabled(true);	}	@Override	public void onPause() {		super.onPause();		mMapView.onPause();		if (googleMap != null)			googleMap.setMyLocationEnabled(false);	}	@Override	public void onLowMemory() {		super.onLowMemory();		mMapView.onLowMemory();	}	@Override	public void onDestroy() {		super.onDestroy();		mMapView.onDestroy();		ServiceRestClientHelper.cancelRequests(ownerActivity);	}}